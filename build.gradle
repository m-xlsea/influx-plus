apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "io.spring.dependency-management"

ext {
    configuration = [
            javaVersion = JavaVersion.VERSION_17
    ]

}

// 编译脚本
buildscript {
    ext {
        springBootVersion = "3.0.0"
    }

    // 仓库配置
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://repo.spring.io/release' }
        maven { url 'https://repo.spring.io/milestone' }
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

group = 'cn.xlsea'
version = '0.0.1'

description = "A tool class for influx db."

sourceCompatibility = "${javaVersion}"
targetCompatibility = "${javaVersion}"

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/repository/spring' }
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://repo.spring.io/release' }
    maven { url 'https://repo.spring.io/milestone' }
    mavenCentral()
}

// 依赖管理
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    compileOnly("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    compileOnly("org.influxdb:influxdb-java:2.23")
    compileOnly("org.nutz:nutz:1.r.66")

    compileOnly("io.projectreactor:reactor-core")
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")

    testCompileOnly("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        failOnError false
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        // maven {
        //     def userName = System.getProperty("un")
        //     def passWord = System.getProperty("ps")
        //     def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        //     def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
        //     url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        //
        //     credentials {
        //         username userName
        //         password passWord
        //     }
        // }
    }
    publications {

        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'influx-plus'
                packaging 'jar'
                description = 'A tool class for influx db.'
                url = 'https://github.com/m-xlsea/influx-plus'

                scm {
                    connection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                    developerConnection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                    url = 'https://github.com/m-xlsea/influx-plus'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'aispud'
                        name = 'xlsea'
                        email = 'm@xlsea.cn'
                    }
                }

                withXml {
                    def root = asNode()
                    root.dependencies.'*'.findAll {
                        def d = it
                        d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }.each() {
                            d.scope*.value = 'compile'
                            d.appendNode('optional', true)
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}